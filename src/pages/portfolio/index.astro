---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
const projects = await getCollection('portfolio');
const tags = ['All','Editing','Motion Graphics','VFX','Color','Sound Design'];
---
<Layout title="Portfolio">
  <section class="max-w-6xl mx-auto py-16 px-6">
    <!-- Header -->
    <header class="text-center mb-16">
      <h1 class="text-5xl font-bold tracking-tight text-gradient leading-tight mb-6">
        Portfolio
      </h1>
      <p class="text-xl opacity-80 max-w-2xl mx-auto">
        A collection of creative work across editing, motion graphics, VFX, and more.
      </p>
    </header>

    <!-- Filter Buttons -->
    <div class="flex flex-wrap justify-center gap-3 mb-12" id="filter-buttons">
      {tags.filter(tag => tag !== 'All').map(tag => (
        <button 
          data-filter={tag} 
          class={`filter-btn wc-card px-6 py-3 text-sm font-medium transition-all duration-300 hover:scale-105 ${tag.toLowerCase().replace(/\s+/g, '-')}-filter`}
          data-selected="false"
        >
          {tag}
        </button>
      ))}
    </div>

    <!-- Portfolio Grid -->
    <div class="grid gap-8 sm:grid-cols-2 lg:grid-cols-3" id="portfolio-grid">
      {projects.map(({ data }, index) => (
        <div class="portfolio-card wc-card p-6 group cursor-pointer transition-all duration-500 hover:scale-[1.02]" 
             data-tags={data.tags.join(',')} 
             data-index={index}
             data-title={data.title}
             data-description={data.description}
             data-video={data.videoURL}
             data-thumbnail={data.thumbnail}>
          <div class="space-y-4">
            <!-- Video Thumbnail -->
            <div class="relative aspect-video cursor-pointer group/video overflow-hidden rounded-lg">
              {data.thumbnail && (
                <img
                  src={data.thumbnail}
                  alt={data.title}
                  class="w-full h-full object-cover transition-transform duration-500 group-hover/video:scale-110"
                  loading="lazy"
                />
              )}
              <div class="absolute inset-0 flex items-center justify-center text-4xl text-white/95 bg-black/40 group-hover/video:bg-black/50 transition-all duration-300">
                <div class="w-16 h-16 rounded-full bg-white/20 backdrop-blur-sm flex items-center justify-center group-hover/video:scale-110 transition-transform duration-300">
                  â–¶
                </div>
              </div>
            </div>

            <!-- Project Info -->
            <div class="space-y-3">
              <h3 class="text-xl font-semibold group-hover:text-orange-400 transition-colors duration-300">
                {data.title}
              </h3>
              {data.description && (
                <p class="text-sm text-neutral-300 leading-relaxed">
                  {data.description}
                </p>
              )}
              <div class="flex flex-wrap gap-2">
                {data.tags.map(t => (
                  <span class="px-3 py-1 text-xs bg-white/10 border border-white/20 rounded-full text-neutral-300 group-hover:border-orange-400/50 transition-colors duration-300">
                    {t}
                  </span>
                ))}
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>

    {projects.length === 0 && (
      <div class="text-center py-16">
        <div class="wc-card p-8">
          <h3 class="text-xl font-medium mb-4">No projects yet</h3>
          <p class="text-neutral-400">Check back soon for new work!</p>
        </div>
      </div>
    )}
  </section>

  <!-- Theater Mode Overlay -->
  <div id="theater-overlay" class="fixed inset-0 z-50 hidden">
    <!-- Backdrop -->
    <div class="absolute inset-0 bg-black/80 backdrop-blur-md transition-all duration-700 ease-out" id="theater-backdrop"></div>
    
    <!-- Theater Window -->
    <div class="absolute inset-0 flex items-center justify-center p-4 sm:p-6">
      <div id="theater-window" class="wc-card w-full max-w-6xl max-h-[90vh] overflow-hidden transform scale-75 opacity-0 transition-all duration-700 ease-out">
        <!-- Header with close button -->
        <div class="flex items-center justify-between p-4 sm:p-6 border-b border-white/10 bg-black/20 backdrop-blur-sm sticky top-0 z-10">
          <h2 id="theater-title" class="text-xl sm:text-2xl font-bold text-gradient pr-4"></h2>
          <button id="theater-close" class="group p-2 hover:bg-white/10 rounded-full transition-all duration-300 flex-shrink-0">
            <svg class="w-5 h-5 sm:w-6 sm:h-6 text-white/70 group-hover:text-white transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        
        <!-- Scrollable Content -->
        <div class="flex-1 overflow-y-auto p-4 sm:p-6 space-y-4 sm:space-y-6">
          <!-- Video Container -->
          <div class="relative aspect-video bg-black rounded-lg overflow-hidden">
            <div id="theater-video-container" class="w-full h-full"></div>
          </div>
          
          <!-- Project Info -->
          <div class="space-y-4">
            <p id="theater-description" class="text-base sm:text-lg text-neutral-200 leading-relaxed"></p>
            <div id="theater-tags" class="flex flex-wrap gap-2"></div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // --- Theater Mode Implementation ---
    class TheaterMode {
      constructor() {
        this.overlay = document.getElementById('theater-overlay');
        this.window = document.getElementById('theater-window');
        this.backdrop = document.getElementById('theater-backdrop');
        this.title = document.getElementById('theater-title');
        this.description = document.getElementById('theater-description');
        this.tags = document.getElementById('theater-tags');
        this.videoContainer = document.getElementById('theater-video-container');
        this.closeBtn = document.getElementById('theater-close');
        this.isOpen = false;
        this.currentVideo = null;
        
        this.init();
      }
      
      init() {
        // Close button click
        this.closeBtn.addEventListener('click', () => this.close());
        
        // ESC key
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && this.isOpen) {
            this.close();
          }
        });
        
        // Backdrop click
        this.backdrop.addEventListener('click', () => this.close());
        
        // Prevent window clicks from closing
        this.window.addEventListener('click', (e) => e.stopPropagation());
        
        // Handle window resize
        window.addEventListener('resize', () => {
          if (this.isOpen) {
            this.adjustContentSizing();
          }
        });
      }
      
      open(projectData) {
        if (this.isOpen) return;
        
        this.currentVideo = projectData;
        this.isOpen = true;
        
        // Set content
        this.title.textContent = projectData.title;
        this.description.textContent = projectData.description || '';
        
        // Set tags
        this.tags.innerHTML = '';
        if (projectData.tags && projectData.tags.length > 0) {
          projectData.tags.forEach(tag => {
            const tagSpan = document.createElement('span');
            tagSpan.className = 'px-3 py-1 text-xs bg-white/10 border border-white/20 rounded-full text-neutral-300';
            tagSpan.textContent = tag;
            this.tags.appendChild(tagSpan);
          });
        }
        
        // Create video embed
        this.createVideoEmbed(projectData.videoURL);
        
        // Show overlay
        this.overlay.classList.remove('hidden');
        
        // Animate in with smoother timing
        requestAnimationFrame(() => {
          this.backdrop.style.opacity = '1';
          this.backdrop.style.backdropFilter = 'blur(8px)';
          this.window.style.transform = 'scale(1)';
          this.window.style.opacity = '1';
        });
        
        // Prevent body scroll
        document.body.style.overflow = 'hidden';
        
        // Adjust content sizing to fit viewport
        this.adjustContentSizing();
      }
      
      close() {
        if (!this.isOpen) return;
        
        this.isOpen = false;
        
        // Animate out with smoother timing
        this.backdrop.style.opacity = '0';
        this.backdrop.style.backdropFilter = 'blur(0px)';
        this.window.style.transform = 'scale(0.75) translateY(20px)';
        this.window.style.opacity = '0';
        
        // Hide overlay after animation completes
        setTimeout(() => {
          this.overlay.classList.add('hidden');
          this.clearVideo();
          document.body.style.overflow = '';
          
          // Reset backdrop filter for next open
          this.backdrop.style.backdropFilter = 'blur(8px)';
        }, 700);
      }
      
      adjustContentSizing() {
        // Get viewport dimensions
        const viewportHeight = window.innerHeight;
        const viewportWidth = window.innerWidth;
        
        // Adjust text sizes for very small screens
        if (viewportWidth < 480) {
          this.title.style.fontSize = '1rem';
          this.description.style.fontSize = '0.85rem';
        } else if (viewportWidth < 768) {
          this.title.style.fontSize = '1.25rem';
          this.description.style.fontSize = '0.95rem';
        } else {
          this.title.style.fontSize = '1.5rem';
          this.description.style.fontSize = '1.125rem';
        }
      }
      
      createVideoEmbed(videoURL) {
        this.clearVideo();
        
        const embedURL = this.toEmbedURL(videoURL);
        if (!embedURL) return;
        
        const iframe = document.createElement('iframe');
        iframe.src = embedURL;
        iframe.className = 'w-full h-full';
        iframe.loading = 'lazy';
        iframe.allow = 'autoplay; fullscreen; picture-in-picture; clipboard-write';
        iframe.referrerPolicy = 'strict-origin-when-cross-origin';
        iframe.setAttribute('allowfullscreen', '');
        
        this.videoContainer.appendChild(iframe);
      }
      
      clearVideo() {
        this.videoContainer.innerHTML = '';
      }
      
      toEmbedURL(raw) {
        if (!raw) return '';

        // YouTube â€” handle watch, short, and embed URLs
        if (/youtu\.?be/.test(raw)) {
          const idMatch =
            raw.match(/[?&]v=([^&]+)/) ||            // https://www.youtube.com/watch?v=ID
            raw.match(/youtu\.be\/([^?&/]+)/) ||     // https://youtu.be/ID
            raw.match(/embed\/([^&]+)/);           // https://www.youtube.com/embed/ID
          const id = idMatch?.[1];
          return id ? `https://www.youtube.com/embed/${id}` : raw;
        }

        // Vimeo â€” convert to player URL
        if (/vimeo\.com/.test(raw)) {
          const idMatch = raw.match(/vimeo\.com\/(?:video\/)?(\d+)/);
          const id = idMatch?.[1];
          // dnt=1 (Do Not Track), hide chrome for a cleaner look
          return id
            ? `https://player.vimeo.com/video/${id}?dnt=1&title=0&byline=0&portrait=0`
            : raw;
        }

        // Fallback: assume it's already an embed or another provider
        return raw;
      }
    }

    // Initialize theater mode
    const theater = new TheaterMode();

    // --- Portfolio Card Click Handlers ---
    document.querySelectorAll('.portfolio-card').forEach(card => {
      card.addEventListener('click', () => {
        const projectData = {
          title: card.dataset.title,
          description: card.dataset.description,
          videoURL: card.dataset.video,
          thumbnail: card.dataset.thumbnail,
          tags: card.dataset.tags.split(',').map(t => t.trim()).filter(Boolean)
        };
        
        theater.open(projectData);
      });
    });

    // --- Helpers ---
    function toEmbedURL(raw) {
      if (!raw) return '';

      // YouTube â€” handle watch, short, and embed URLs
      if (/youtu\.?be/.test(raw)) {
        const idMatch =
          raw.match(/[?&]v=([^&]+)/) ||            // https://www.youtube.com/watch?v=ID
          raw.match(/youtu\.be\/([^?&/]+)/) ||     // https://youtu.be/ID
          raw.match(/embed\/([^&]+)/);           // https://www.youtube.com/embed/ID
        const id = idMatch?.[1];
        return id ? `https://www.youtube.com/embed/${id}` : raw;
      }

      // Vimeo â€” convert to player URL
      if (/vimeo\.com/.test(raw)) {
        const idMatch = raw.match(/vimeo\.com\/(?:video\/)?(\d+)/);
        const id = idMatch?.[1];
        // dnt=1 (Do Not Track), hide chrome for a cleaner look
        return id
          ? `https://player.vimeo.com/video/${id}?dnt=1&title=0&byline=0&portrait=0`
          : raw;
      }

      // Fallback: assume it's already an embed or another provider
      return raw;
    }

    // --- Filtering ---
    const filterButtons = document.querySelectorAll('[data-filter]');
    const portfolioItems = document.querySelectorAll('[data-tags]');
    let selectedTags = new Set(); // Start with no filters selected (show all)

    console.log('Filter buttons found:', filterButtons.length);
    console.log('Portfolio items found:', portfolioItems.length);

    function updateButtonStates() {
      filterButtons.forEach(btn => {
        const tag = btn.dataset.filter;
        const isSelected = selectedTags.has(tag);
        
        if (isSelected) {
          btn.classList.add('filter-active');
          btn.dataset.selected = 'true';
        } else {
          btn.classList.remove('filter-active');
          btn.dataset.selected = 'false';
        }
      });
    }

    function filterItems() {
      console.log('Filtering items. Selected tags:', Array.from(selectedTags));
      portfolioItems.forEach(item => {
        const itemTags = (item.dataset.tags || '').split(',').map(s => s.trim()).filter(Boolean);
        const shouldShow = selectedTags.size === 0 || (selectedTags.size > 0 && Array.from(selectedTags).every(tag => itemTags.includes(tag)));
        console.log('Item tags:', itemTags, 'Should show:', shouldShow);
        item.style.display = shouldShow ? '' : 'none';
      });
    }

    filterButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const tag = btn.dataset.filter;
        console.log('Filter button clicked:', tag);
        
        if (selectedTags.has(tag)) {
          selectedTags.delete(tag);
        } else {
          selectedTags.add(tag);
        }

        updateButtonStates();
        filterItems();
      });
    });

    updateButtonStates();
    filterItems();
  </script>
</Layout>

<style>
  /* Glass card styles matching other pages */
  .wc-card {
    background: rgba(255,255,255,0.06);
    border: 1px solid rgba(255,255,255,0.12);
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
    box-shadow: 0 1px 0 rgba(255,255,255,0.05) inset, 0 20px 50px rgba(0,0,0,0.4);
    border-radius: 16px;
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .wc-card:hover {
    border-color: rgba(255,255,255,0.2);
    box-shadow: 0 25px 60px rgba(0,0,0,0.5), 0 1px 0 rgba(255,255,255,0.08) inset;
  }

  /* Theater Mode Styles */
  #theater-overlay {
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
  }

  #theater-window {
    box-shadow: 0 25px 100px rgba(0,0,0,0.8), 0 1px 0 rgba(255,255,255,0.1) inset;
    border: 1px solid rgba(255,255,255,0.15);
    /* Ensure content fits without scrolling */
    display: flex;
    flex-direction: column;
    /* Prevent content overflow */
    overflow: hidden;
  }

  #theater-close {
    backdrop-filter: blur(4px);
    -webkit-backdrop-filter: blur(4px);
  }

  #theater-close:hover {
    background: rgba(255,255,255,0.15);
    transform: scale(1.1);
  }

  /* Theater backdrop animation */
  #theater-backdrop {
    opacity: 0;
    backdrop-filter: blur(0px);
    -webkit-backdrop-filter: blur(0px);
    transition: all 0.7s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  /* Theater window animation */
  #theater-window {
    transform: scale(0.75) translateY(20px);
    opacity: 0;
    transition: all 0.7s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    transform-origin: center center;
    /* Ensure the window doesn't get too wide */
    max-width: 90vw;
    max-height: 90vh;
    /* Force the window to be more compact on wide screens */
    width: auto;
    height: auto;
    /* Use flexbox for header/content layout */
    display: flex;
    flex-direction: column;
  }

  /* Header styling */
  #theater-window > div:first-child {
    flex-shrink: 0;
  }

  /* Scrollable content area */
  #theater-window > div:last-child {
    flex: 1;
    min-height: 0;
  }

  /* Custom scrollbar styling */
  #theater-window > div:last-child::-webkit-scrollbar {
    width: 6px;
  }

  #theater-window > div:last-child::-webkit-scrollbar-track {
    background: transparent;
  }

  #theater-window > div:last-child::-webkit-scrollbar-thumb {
    background: rgba(255,255,255,0.3);
    border-radius: 3px;
  }

  #theater-window > div:last-child::-webkit-scrollbar-thumb:hover {
    background: rgba(255,255,255,0.5);
  }

  /* Video container styling */
  #theater-video-container iframe {
    border-radius: 8px;
  }

  /* Theater window open state */
  #theater-window.open {
    transform: scale(1) translateY(0);
    opacity: 1;
  }

  /* Responsive video container for wide screens */
  .aspect-video {
    transition: max-height 0.3s ease-out;
  }

  /* Content container responsive adjustments */
  .theater-content {
    transition: padding 0.3s ease-out, gap 0.3s ease-out;
  }

  /* Responsive theater mode */
  @media (max-width: 768px) {
    #theater-window {
      max-width: 95vw;
      margin: 0.5rem;
      max-height: 95vh;
    }
    
    #theater-title {
      font-size: 1.25rem;
      line-height: 1.3;
    }
    
    #theater-description {
      font-size: 0.95rem;
      line-height: 1.5;
    }

    #theater-tags {
      gap: 0.5rem;
    }

    #theater-tags span {
      font-size: 0.75rem;
      padding: 0.25rem 0.5rem;
    }
  }

  @media (max-width: 480px) {
    #theater-window {
      max-width: 98vw;
      margin: 0.25rem;
      max-height: 98vh;
    }
    
    #theater-title {
      font-size: 1.1rem;
    }
    
    #theater-description {
      font-size: 0.9rem;
    }
  }

  /* Filter button specific styling */
  .filter-btn {
    text-decoration: none;
    color: inherit;
    background: transparent;
    border: 1px solid rgba(255,255,255,0.12);
    position: relative;
    overflow: hidden;
  }

  /* Filter button active states with unique animations */
  .filter-btn.filter-active {
    border-color: rgba(255,255,255,0.3);
    color: white;
    font-weight: 600;
    text-shadow: 0 1px 3px rgba(0,0,0,0.8), 0 2px 6px rgba(0,0,0,0.6);
  }

  /* Editing - Green shades cycling left-to-right */
  .editing-filter.filter-active {
    background: linear-gradient(90deg, rgba(16, 185, 129, 0.85), rgba(5, 150, 105, 0.85), rgba(4, 120, 87, 0.85), rgba(6, 95, 70, 0.85), rgba(6, 78, 59, 0.85));
    background-size: 200% 100%;
    animation: greenSlide 3s ease-in-out infinite;
  }

  @keyframes greenSlide {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }

  /* Motion Graphics - Blue/purple cycling with text wiggle */
  .motion-graphics-filter.filter-active {
    background: linear-gradient(90deg, rgba(59, 130, 246, 0.85), rgba(139, 92, 246, 0.85), rgba(99, 102, 241, 0.85), rgba(168, 85, 247, 0.85), rgba(124, 58, 237, 0.85));
    background-size: 200% 100%;
    animation: bluePurpleSlide 4s ease-in-out infinite, textWiggle 2s ease-in-out infinite;
  }

  @keyframes bluePurpleSlide {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }

  @keyframes textWiggle {
    0%, 100% { transform: rotate(0deg); }
    25% { transform: rotate(0.5deg); }
    75% { transform: rotate(-0.5deg); }
  }

  /* VFX - Neon CMY with black anchors */
  .vfx-filter.filter-active {
    background: linear-gradient(
      45deg,
      rgba(0,0,0,0.9) 0%,
      rgba(0,0,0,0.9) 10%,
      rgba(0, 240, 255, 0.8) 20%,
      rgba(255, 0, 255, 0.8) 30%,
      rgba(255, 240, 0, 0.8) 40%,
      rgba(255, 255, 255, 0.8) 50%,
      rgba(255, 0, 255, 0.8) 60%,
      rgba(0, 240, 255, 0.8) 70%,
      rgba(0,0,0,0.9) 80%,
      rgba(0,0,0,0.9) 100%
    );
    background-size: 200% 200%;
    animation: vfxNeon 2s ease-in-out infinite;
  }

  @keyframes vfxNeon {
    0%, 100% { background-position: 0% 0%; }
    50% { background-position: 100% 100%; }
  }

  /* Color - Rainbow cycling */
  .color-filter.filter-active {
    background: linear-gradient(90deg, rgba(255,0,0,0.8), rgba(255,128,0,0.8), rgba(255,255,0,0.8), rgba(128,255,0,0.8), rgba(0,255,0,0.8), rgba(0,255,128,0.8), rgba(0,255,255,0.8), rgba(0,128,255,0.8), rgba(0,0,255,0.8), rgba(128,0,255,0.8), rgba(255,0,255,0.8), rgba(255,0,128,0.8));
    background-size: 400% 100%;
    animation: rainbowCycle 6s linear infinite;
  }

  @keyframes rainbowCycle {
    0% { background-position: 0% 50%; }
    100% { background-position: 400% 50%; }
  }

  /* Sound Design - Black and grey sine waves */
  .sound-design-filter.filter-active {
    background: 
      linear-gradient(90deg, transparent 0%, rgba(31, 41, 55, 0.85) 20%, rgba(55, 65, 81, 0.85) 40%, rgba(31, 41, 55, 0.85) 60%, rgba(55, 65, 81, 0.85) 80%, transparent 100%),
      linear-gradient(90deg, transparent 0%, rgba(17, 24, 39, 0.85) 30%, rgba(31, 41, 55, 0.85) 50%, rgba(17, 24, 39, 0.85) 70%, transparent 100%);
    background-size: 200% 100%, 150% 100%;
    animation: soundWaves 3s ease-in-out infinite;
  }

  @keyframes soundWaves {
    0%, 100% { 
      background-position: 0% 50%, 0% 50%; 
    }
    50% { 
      background-position: 100% 50%, 100% 50%; 
    }
  }

  /* Subtle pulsating effect for all active filters */
  .filter-btn.filter-active::before {
    content: '';
    position: absolute;
    inset: 0;
    background: inherit;
    opacity: 0.6;
    animation: subtlePulse 2s ease-in-out infinite;
    z-index: -1;
  }

  @keyframes subtlePulse {
    0%, 100% { opacity: 0.6; }
    50% { opacity: 0.8; }
  }

  /* Portfolio card specific animations */
  .portfolio-card {
    opacity: 0;
    transform: translateY(30px);
    animation: fadeInUp 0.6s ease-out forwards;
  }

  .portfolio-card:nth-child(1) { animation-delay: 0.1s; }
  .portfolio-card:nth-child(2) { animation-delay: 0.2s; }
  .portfolio-card:nth-child(3) { animation-delay: 0.3s; }
  .portfolio-card:nth-child(4) { animation-delay: 0.4s; }
  .portfolio-card:nth-child(5) { animation-delay: 0.5s; }
  .portfolio-card:nth-child(6) { animation-delay: 0.6s; }
  .portfolio-card:nth-child(7) { animation-delay: 0.7s; }
  .portfolio-card:nth-child(8) { animation-delay: 0.8s; }
  .portfolio-card:nth-child(9) { animation-delay: 0.9s; }

  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Text gradient utility */
  .text-gradient {
    background: linear-gradient(135deg, #fafafa 0%, #a1a1aa 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
</style>
