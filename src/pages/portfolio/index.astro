---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
const projects = await getCollection('portfolio');
const tags = ['All','Editing','Motion Graphics','VFX','Color','Sound Design'];
---
<Layout title="Portfolio">
  <section class="py-10 mx-[10%]">
    <div class="flex flex-wrap justify-center gap-2 mb-8" id="filter-buttons">
      {tags.map(tag => (
        <button 
          data-filter={tag} 
          class="px-3 py-1 rounded-full border border-fg/30 text-sm hover:bg-fg/10 transition-all duration-200 filter-btn"
          data-selected={tag === 'All' ? 'true' : 'false'}
        >
          {tag}
        </button>
      ))}
    </div>

    <div class="grid gap-8 sm:grid-cols-2 lg:grid-cols-3" id="portfolio-grid">
      {projects.map(({ data }) => (
        <div class="space-y-2" data-tags={data.tags.join(',')}>
          <div class="relative aspect-video cursor-pointer group" data-video={data.videoURL}>
            {data.thumbnail && (
              <img
                src={data.thumbnail}
                alt={data.title}
                class="absolute inset-0 w-full h-full object-cover"
                loading="lazy"
              />
            )}
            <div class="absolute inset-0 flex items-center justify-center text-4xl text-white/95 bg-black/40 group-hover:bg-black/50 transition-colors">▶</div>
          </div>

          <h3 class="font-semibold">{data.title}</h3>
          {data.description && <p class="text-sm opacity-80">{data.description}</p>}
          <div class="flex flex-wrap gap-1 text-xs opacity-70">
            {data.tags.map(t => <span class="px-2 py-1 border border-fg/30 rounded-full">{t}</span>)}
          </div>
        </div>
      ))}
    </div>
  </section>

  <script>
    // --- Helpers ---
    function toEmbedURL(raw) {
      if (!raw) return '';

      // YouTube — handle watch, short, and embed URLs
      if (/youtu\.?be/.test(raw)) {
        const idMatch =
          raw.match(/[?&]v=([^&]+)/) ||            // https://www.youtube.com/watch?v=ID
          raw.match(/youtu\.be\/([^?&/]+)/) ||     // https://youtu.be/ID
          raw.match(/embed\/([^?&/]+)/);           // https://www.youtube.com/embed/ID
        const id = idMatch?.[1];
        return id ? `https://www.youtube.com/embed/${id}` : raw;
      }

      // Vimeo — convert to player URL
      if (/vimeo\.com/.test(raw)) {
        const idMatch = raw.match(/vimeo\.com\/(?:video\/)?(\d+)/);
        const id = idMatch?.[1];
        // dnt=1 (Do Not Track), hide chrome for a cleaner look
        return id
          ? `https://player.vimeo.com/video/${id}?dnt=1&title=0&byline=0&portrait=0`
          : raw;
      }

      // Fallback: assume it's already an embed or another provider
      return raw;
    }

    // --- Filtering ---
    const filterButtons = document.querySelectorAll('[data-filter]');
    const portfolioItems = document.querySelectorAll('[data-tags]');
    let selectedTags = new Set(['All']); // Start with 'All' selected

    function updateButtonStates() {
      filterButtons.forEach(btn => {
        const tag = btn.dataset.filter;
        const isSelected = selectedTags.has(tag);
        
        if (isSelected) {
          btn.classList.add('bg-fg', 'text-bg');
          btn.classList.remove('border-fg/30', 'hover:bg-fg/10');
          btn.dataset.selected = 'true';
        } else {
          btn.classList.remove('bg-fg', 'text-bg');
          btn.classList.add('border-fg/30', 'hover:bg-fg/10');
          btn.dataset.selected = 'false';
        }
      });
    }

    function filterItems() {
      portfolioItems.forEach(item => {
        const itemTags = (item.dataset.tags || '').split(',').map(s => s.trim()).filter(Boolean);
        const shouldShow = selectedTags.has('All') || itemTags.some(tag => selectedTags.has(tag));
        item.style.display = shouldShow ? '' : 'none';
      });
    }

    filterButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const tag = btn.dataset.filter;
        
        if (tag === 'All') {
          selectedTags.clear();
          selectedTags.add('All');
        } else {
          selectedTags.delete('All');
          if (selectedTags.has(tag)) selectedTags.delete(tag);
          else selectedTags.add(tag);
          if (selectedTags.size === 0) selectedTags.add('All');
        }

        updateButtonStates();
        filterItems();
      });
    });

    updateButtonStates();
    filterItems();

    // --- Video click-to-embed (Vimeo/YouTube safe) ---
    document.querySelectorAll('[data-video]').forEach(el => {
      const raw = el.dataset.video;
      const src = toEmbedURL(raw);

      el.addEventListener('click', () => {
        const iframe = document.createElement('iframe');
        iframe.src = src;
        iframe.className = 'w-full h-full';
        iframe.loading = 'lazy';
        iframe.allow = 'autoplay; fullscreen; picture-in-picture; clipboard-write';
        iframe.referrerPolicy = 'strict-origin-when-cross-origin';
        iframe.setAttribute('allowfullscreen', '');

        // Replace the thumbnail/overlay with the embed
        el.innerHTML = '';
        const wrapper = document.createElement('div');
        wrapper.className = 'absolute inset-0';
        wrapper.appendChild(iframe);
        el.appendChild(wrapper);
      }, { once: true }); // only replace once
    });
  </script>
</Layout>
