---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
const projects = await getCollection('portfolio');
const tags = ['All','Editing','Motion Graphics','VFX','Color','Sound Design'];
---
<Layout title="Portfolio">
  <section class="max-w-6xl mx-auto py-16 px-6">
    <!-- Header -->
    <header class="text-center mb-16">
      <h1 class="text-5xl font-bold tracking-tight text-gradient leading-tight mb-6">
        Portfolio
      </h1>
      <p class="text-xl opacity-80 max-w-2xl mx-auto">
        A collection of creative work across editing, motion graphics, VFX, and more.
      </p>
    </header>

    <!-- Filter Buttons -->
    <div class="flex flex-wrap justify-center gap-3 mb-12" id="filter-buttons">
      {tags.filter(tag => tag !== 'All').map(tag => (
        <button 
          data-filter={tag} 
          class={`filter-btn wc-card px-6 py-3 text-sm font-medium transition-all duration-300 hover:scale-105 ${tag.toLowerCase().replace(/\s+/g, '-')}-filter`}
          data-selected="false"
        >
          {tag}
        </button>
      ))}
    </div>

    <!-- Portfolio Grid -->
    <div class="grid gap-8 sm:grid-cols-2 lg:grid-cols-3" id="portfolio-grid">
      {projects.map(({ data }, index) => (
        <div class="portfolio-card wc-card p-6 group cursor-pointer transition-all duration-500 hover:scale-[1.02]" data-tags={data.tags.join(',')} data-index={index}>
          <div class="space-y-4">
            <!-- Video Thumbnail -->
            <div class="relative aspect-video cursor-pointer group/video overflow-hidden rounded-lg" data-video={data.videoURL}>
              {data.thumbnail && (
                <img
                  src={data.thumbnail}
                  alt={data.title}
                  class="w-full h-full object-cover transition-transform duration-500 group-hover/video:scale-110"
                  loading="lazy"
                />
              )}
              <div class="absolute inset-0 flex items-center justify-center text-4xl text-white/95 bg-black/40 group-hover/video:bg-black/50 transition-all duration-300">
                <div class="w-16 h-16 rounded-full bg-white/20 backdrop-blur-sm flex items-center justify-center group-hover/video:scale-110 transition-transform duration-300">
                  ▶
                </div>
              </div>
            </div>

            <!-- Project Info -->
            <div class="space-y-3">
              <h3 class="text-xl font-semibold group-hover:text-orange-400 transition-colors duration-300">
                {data.title}
              </h3>
              {data.description && (
                <p class="text-sm text-neutral-300 leading-relaxed">
                  {data.description}
                </p>
              )}
              <div class="flex flex-wrap gap-2">
                {data.tags.map(t => (
                  <span class="px-3 py-1 text-xs bg-white/10 border border-white/20 rounded-full text-neutral-300 group-hover:border-orange-400/50 transition-colors duration-300">
                    {t}
                  </span>
                ))}
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>

    {projects.length === 0 && (
      <div class="text-center py-16">
        <div class="wc-card p-8">
          <h3 class="text-xl font-medium mb-4">No projects yet</h3>
          <p class="text-neutral-400">Check back soon for new work!</p>
        </div>
      </div>
    )}
  </section>

  <script>
    // --- Helpers ---
    function toEmbedURL(raw) {
      if (!raw) return '';

      // YouTube — handle watch, short, and embed URLs
      if (/youtu\.?be/.test(raw)) {
        const idMatch =
          raw.match(/[?&]v=([^&]+)/) ||            // https://www.youtube.com/watch?v=ID
          raw.match(/youtu\.be\/([^?&/]+)/) ||     // https://youtu.be/ID
          raw.match(/embed\/([^&]+)/);           // https://www.youtube.com/embed/ID
        const id = idMatch?.[1];
        return id ? `https://www.youtube.com/embed/${id}` : raw;
      }

      // Vimeo — convert to player URL
      if (/vimeo\.com/.test(raw)) {
        const idMatch = raw.match(/vimeo\.com\/(?:video\/)?(\d+)/);
        const id = idMatch?.[1];
        // dnt=1 (Do Not Track), hide chrome for a cleaner look
        return id
          ? `https://player.vimeo.com/video/${id}?dnt=1&title=0&byline=0&portrait=0`
          : raw;
      }

      // Fallback: assume it's already an embed or another provider
      return raw;
    }

    // --- Filtering ---
    const filterButtons = document.querySelectorAll('[data-filter]');
    const portfolioItems = document.querySelectorAll('[data-tags]');
    let selectedTags = new Set(); // Start with no filters selected (show all)

    console.log('Filter buttons found:', filterButtons.length);
    console.log('Portfolio items found:', portfolioItems.length);

    function updateButtonStates() {
      filterButtons.forEach(btn => {
        const tag = btn.dataset.filter;
        const isSelected = selectedTags.has(tag);
        
        if (isSelected) {
          btn.classList.add('filter-active');
          btn.dataset.selected = 'true';
        } else {
          btn.classList.remove('filter-active');
          btn.dataset.selected = 'false';
        }
      });
    }

    function filterItems() {
      console.log('Filtering items. Selected tags:', Array.from(selectedTags));
      portfolioItems.forEach(item => {
        const itemTags = (item.dataset.tags || '').split(',').map(s => s.trim()).filter(Boolean);
        const shouldShow = selectedTags.size === 0 || (selectedTags.size > 0 && Array.from(selectedTags).every(tag => itemTags.includes(tag)));
        console.log('Item tags:', itemTags, 'Should show:', shouldShow);
        item.style.display = shouldShow ? '' : 'none';
      });
    }

    filterButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const tag = btn.dataset.filter;
        console.log('Filter button clicked:', tag);
        
        if (selectedTags.has(tag)) {
          selectedTags.delete(tag);
        } else {
          selectedTags.add(tag);
        }

        updateButtonStates();
        filterItems();
      });
    });

    updateButtonStates();
    filterItems();

    // --- Video click-to-embed (Vimeo/YouTube safe) ---
    document.querySelectorAll('[data-video]').forEach(el => {
      const raw = el.dataset.video;
      const src = toEmbedURL(raw);

      el.addEventListener('click', () => {
        const iframe = document.createElement('iframe');
        iframe.src = src;
        iframe.className = 'w-full h-full';
        iframe.loading = 'lazy';
        iframe.allow = 'autoplay; fullscreen; picture-in-picture; clipboard-write';
        iframe.referrerPolicy = 'strict-origin-when-cross-origin';
        iframe.setAttribute('allowfullscreen', '');

        // Replace the thumbnail/overlay with the embed
        el.innerHTML = '';
        const wrapper = document.createElement('div');
        wrapper.className = 'absolute inset-0';
        wrapper.appendChild(iframe);
        el.appendChild(wrapper);
      });
    });
  </script>
</Layout>

<style>
  /* Glass card styles matching other pages */
  .wc-card {
    background: rgba(255,255,255,0.06);
    border: 1px solid rgba(255,255,255,0.12);
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
    box-shadow: 0 1px 0 rgba(255,255,255,0.05) inset, 0 20px 50px rgba(0,0,0,0.4);
    border-radius: 16px;
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .wc-card:hover {
    border-color: rgba(255,255,255,0.2);
    box-shadow: 0 25px 60px rgba(0,0,0,0.5), 0 1px 0 rgba(255,255,255,0.08) inset;
  }

  /* Filter button specific styling */
  .filter-btn {
    text-decoration: none;
    color: inherit;
    background: transparent;
    border: 1px solid rgba(255,255,255,0.12);
    position: relative;
    overflow: hidden;
  }

  /* Filter button active states with unique animations */
  .filter-btn.filter-active {
    border-color: rgba(255,255,255,0.3);
    color: white;
    font-weight: 600;
    text-shadow: 0 1px 3px rgba(0,0,0,0.8), 0 2px 6px rgba(0,0,0,0.6);
  }

  /* Editing - Green shades cycling left-to-right */
  .editing-filter.filter-active {
    background: linear-gradient(90deg, rgba(16, 185, 129, 0.85), rgba(5, 150, 105, 0.85), rgba(4, 120, 87, 0.85), rgba(6, 95, 70, 0.85), rgba(6, 78, 59, 0.85));
    background-size: 200% 100%;
    animation: greenSlide 3s ease-in-out infinite;
  }

  @keyframes greenSlide {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }

  /* Motion Graphics - Blue/purple cycling with text wiggle */
  .motion-graphics-filter.filter-active {
    background: linear-gradient(90deg, rgba(59, 130, 246, 0.85), rgba(139, 92, 246, 0.85), rgba(99, 102, 241, 0.85), rgba(168, 85, 247, 0.85), rgba(124, 58, 237, 0.85));
    background-size: 200% 100%;
    animation: bluePurpleSlide 4s ease-in-out infinite, textWiggle 2s ease-in-out infinite;
  }

  @keyframes bluePurpleSlide {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }

  @keyframes textWiggle {
    0%, 100% { transform: rotate(0deg); }
    25% { transform: rotate(0.5deg); }
    75% { transform: rotate(-0.5deg); }
  }

  /* VFX - Neon CMY with black anchors */
  .vfx-filter.filter-active {
    background: linear-gradient(
      45deg,
      rgba(0,0,0,0.9) 0%,
      rgba(0,0,0,0.9) 10%,
      rgba(0, 240, 255, 0.8) 20%,
      rgba(255, 0, 255, 0.8) 30%,
      rgba(255, 240, 0, 0.8) 40%,
      rgba(255, 255, 255, 0.8) 50%,
      rgba(255, 0, 255, 0.8) 60%,
      rgba(0, 240, 255, 0.8) 70%,
      rgba(0,0,0,0.9) 80%,
      rgba(0,0,0,0.9) 100%
    );
    background-size: 200% 200%;
    animation: vfxNeon 2s ease-in-out infinite;
  }

  @keyframes vfxNeon {
    0%, 100% { background-position: 0% 0%; }
    50% { background-position: 100% 100%; }
  }

  /* Color - Rainbow cycling */
  .color-filter.filter-active {
    background: linear-gradient(90deg, rgba(255,0,0,0.8), rgba(255,128,0,0.8), rgba(255,255,0,0.8), rgba(128,255,0,0.8), rgba(0,255,0,0.8), rgba(0,255,128,0.8), rgba(0,255,255,0.8), rgba(0,128,255,0.8), rgba(0,0,255,0.8), rgba(128,0,255,0.8), rgba(255,0,255,0.8), rgba(255,0,128,0.8));
    background-size: 400% 100%;
    animation: rainbowCycle 6s linear infinite;
  }

  @keyframes rainbowCycle {
    0% { background-position: 0% 50%; }
    100% { background-position: 400% 50%; }
  }

  /* Sound Design - Black and grey sine waves */
  .sound-design-filter.filter-active {
    background: 
      linear-gradient(90deg, transparent 0%, rgba(31, 41, 55, 0.85) 20%, rgba(55, 65, 81, 0.85) 40%, rgba(31, 41, 55, 0.85) 60%, rgba(55, 65, 81, 0.85) 80%, transparent 100%),
      linear-gradient(90deg, transparent 0%, rgba(17, 24, 39, 0.85) 30%, rgba(31, 41, 55, 0.85) 50%, rgba(17, 24, 39, 0.85) 70%, transparent 100%);
    background-size: 200% 100%, 150% 100%;
    animation: soundWaves 3s ease-in-out infinite;
  }

  @keyframes soundWaves {
    0%, 100% { 
      background-position: 0% 50%, 0% 50%; 
    }
    50% { 
      background-position: 100% 50%, 100% 50%; 
    }
  }

  /* Subtle pulsating effect for all active filters */
  .filter-btn.filter-active::before {
    content: '';
    position: absolute;
    inset: 0;
    background: inherit;
    opacity: 0.6;
    animation: subtlePulse 2s ease-in-out infinite;
    z-index: -1;
  }

  @keyframes subtlePulse {
    0%, 100% { opacity: 0.6; }
    50% { opacity: 0.8; }
  }

  /* Portfolio card specific animations */
  .portfolio-card {
    opacity: 0;
    transform: translateY(30px);
    animation: fadeInUp 0.6s ease-out forwards;
  }

  .portfolio-card:nth-child(1) { animation-delay: 0.1s; }
  .portfolio-card:nth-child(2) { animation-delay: 0.2s; }
  .portfolio-card:nth-child(3) { animation-delay: 0.3s; }
  .portfolio-card:nth-child(4) { animation-delay: 0.4s; }
  .portfolio-card:nth-child(5) { animation-delay: 0.5s; }
  .portfolio-card:nth-child(6) { animation-delay: 0.6s; }
  .portfolio-card:nth-child(7) { animation-delay: 0.7s; }
  .portfolio-card:nth-child(8) { animation-delay: 0.8s; }
  .portfolio-card:nth-child(9) { animation-delay: 0.9s; }

  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Text gradient utility */
  .text-gradient {
    background: linear-gradient(135deg, #fafafa 0%, #a1a1aa 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
</style>
